var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.083,1,1.858]],["body/controllers/AppController.html",[0,1.712,1,2.937,2,1.364,3,0.494,4,0.425,5,0.425,6,3.108,7,1.233,8,0.033,9,3.349,10,3.349,11,0.62,12,0.039,13,0.905,14,2.551,15,3.108,16,0.494,17,2.078,18,1.673,19,0.031,20,0.031]],["title/modules/AppModule.html",[21,1.083,22,1.858]],["body/modules/AppModule.html",[1,2.76,2,1.4,3,0.364,4,0.313,5,0.313,8,0.018,11,0.685,12,0.039,13,0.668,14,2.581,15,2.292,16,0.364,19,0.025,20,0.025,21,1.609,22,3.561,23,1.716,24,1.234,25,1.533,26,1.533,27,1.234,28,2.451,29,1.533,30,2.292,31,2.292,32,2.292,33,2.581,34,2.883,35,2.321,36,2.132,37,1.533,38,1.372,39,2.784,40,2.401,41,2.784,42,2.784,43,2.784,44,2.784,45,1.726,46,2.292]],["title/injectables/AppService.html",[14,1.477,47,1.083]],["body/injectables/AppService.html",[3,0.462,4,0.398,5,0.398,7,1.154,8,0.032,9,3.209,10,3.209,11,0.462,12,0.039,13,0.847,14,2.237,16,0.462,19,0.029,20,0.029,47,1.641,48,1.944,49,2.907,50,0.759,51,2.237,52,5.298,53,1.043,54,3.531,55,3.738,56,1.74,57,1.641,58,1.74,59,3.531,60,2.907]],["title/controllers/AuthController.html",[0,1.083,61,1.65]],["body/controllers/AuthController.html",[0,1.425,2,1.425,3,0.516,4,0.444,5,0.444,8,0.025,11,0.637,12,0.039,13,0.945,16,0.516,17,2.17,18,1.747,19,0.031,20,0.031,61,2.679,62,3.245,63,2.786,64,3.942,65,2.34,66,3.245,67,3.942]],["title/modules/AuthModule.html",[21,1.083,33,1.477]],["body/modules/AuthModule.html",[2,1.511,3,0.407,4,0.351,5,0.351,8,0.02,11,0.66,12,0.038,13,0.747,16,0.407,19,0.027,20,0.027,21,1.705,23,1.38,24,1.38,25,1.714,26,1.714,27,1.38,28,2.598,29,2.598,33,2.727,35,1.853,36,2.301,37,1.714,38,1.534,40,1.93,61,2.598,65,2.593,66,2.563,68,2.563,69,2.563,70,2.563,71,3.113,72,2.591,73,3.113,74,2.563]],["title/injectables/AuthService.html",[47,1.083,65,1.329]],["body/injectables/AuthService.html",[3,0.361,4,0.311,5,0.311,8,0.018,11,0.504,12,0.039,13,0.662,16,0.361,18,1.224,19,0.025,20,0.025,45,1.712,47,1.392,48,1.521,50,0.594,51,1.898,53,1.309,56,1.898,57,2.033,58,1.898,65,1.707,72,1.712,75,2.274,76,2.876,77,3.95,78,3.852,79,2.723,80,2.274,81,2.144,82,2.762,83,2.12,84,2.12,85,1.137,86,1.54,87,2.762,88,2.762,89,3.852,90,3.651,91,2.749,92,2.762,93,1.953,94,2.274,95,2.274,96,2.274,97,2.274,98,1.953,99,2.762,100,2.762,101,2.274]],["title/classes/CreatePostDto.html",[8,0.019,102,1.65]],["body/classes/CreatePostDto.html",[3,0.175,4,0.151,5,0.151,7,1.612,8,0.018,11,0.512,12,0.038,16,0.175,19,0.014,20,0.014,50,0.288,53,1.365,57,1.783,85,1.521,86,1.937,101,2.701,102,1.217,103,0.593,104,3.351,105,0.946,106,1.252,107,2.326,108,2.825,109,2.825,110,3.563,111,2.825,112,2.825,113,3.632,114,1.997,115,2.825,116,2.326,117,2.049,118,1.82,119,2.866,120,1.338,121,1.338,122,1.338,123,1.338,124,2.034,125,1.338,126,2.211,127,1.82,128,1.82,129,2.211,130,1.338,131,1.338,132,1.338,133,2.211,134,3.281,135,3.281,136,1.392,137,1.37,138,1.82,139,1.338,140,1.338,141,2.211,142,2.326,143,2.211,144,2.211,145,2.211,146,2.211,147,2.211,148,1.338,149,1.338,150,2.211,151,2.211,152,2.825,153,2.211,154,2.211,155,1.338,156,1.338,157,1.338,158,2.211,159,2.211,160,2.211,161,1.82,162,2.211,163,1.338,164,2.99,165,1.82,166,1.82,167,1.82,168,1.338,169,1.338,170,1.338,171,3.281,172,1.338,173,1.338,174,1.338,175,1.338,176,2.825,177,1.338,178,1.338,179,2.211,180,2.211,181,2.425,182,1.338,183,2.765,184,2.765,185,1.101,186,1.101,187,2.211,188,0.659,189,1.338,190,1.338,191,0.829,192,1.338,193,0.946,194,3.221,195,3.221,196,0.659,197,1.338,198,2.211,199,1.101,200,1.338,201,1.338,202,1.338,203,1.101,204,1.338,205,1.338,206,1.338,207,1.101,208,1.101,209,0.946]],["title/classes/CreatePostMetaOptionsDto.html",[8,0.019,124,1.858]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.457,4,0.394,5,0.394,8,0.029,11,0.457,12,0.038,16,0.457,19,0.029,20,0.029,50,0.752,53,1.332,57,1.63,85,1.332,103,1.549,104,3.531,106,1.999,117,1.999,124,2.797,136,2.461,181,3.272,184,3.189,188,1.722,208,4.113,209,3.531,210,2.878,211,3.496,212,3.496,213,3.496]],["title/classes/CreateUserDto.html",[8,0.019,214,1.65]],["body/classes/CreateUserDto.html",[3,0.334,4,0.288,5,0.288,8,0.024,11,0.334,12,0.038,16,0.334,19,0.024,20,0.024,50,0.549,53,1.368,57,1.937,85,1.368,86,1.457,90,3.498,93,3.003,103,1.132,106,1.615,117,2.053,161,3,181,2.872,183,2.576,184,3.275,185,2.103,186,2.103,188,1.258,207,3,214,2.006,215,4.033,216,1.805,217,4.249,218,3.498,219,2.554,220,2.554,221,2.554,222,2.554,223,2.554,224,2.554,225,2.554,226,4.633,227,3.644,228,3.644,229,3.644,230,3.644,231,3.644,232,5.094,233,3.644,234,2.006,235,3.644,236,3.644,237,2.554,238,3.644,239,2.554,240,3.644,241,2.554,242,2.554]],["title/classes/GetUsersParamDto.html",[8,0.019,243,1.65]],["body/classes/GetUsersParamDto.html",[3,0.428,4,0.368,5,0.368,7,1.069,8,0.031,11,0.633,12,0.039,16,0.428,19,0.028,20,0.028,45,2.678,50,0.704,53,0.966,85,1.428,86,1.727,91,3.316,103,1.45,106,1.914,117,1.45,118,2.693,119,2.678,183,3.053,188,1.612,193,2.312,195,3.556,196,1.612,234,2.663,243,2.378,244,3.556,245,2.678,246,2.693,247,3.271,248,3.271,249,3.556,250,2.693]],["title/classes/PatchPostDto.html",[8,0.019,251,1.858]],["body/classes/PatchPostDto.html",[3,0.444,4,0.382,5,0.382,7,1.11,8,0.029,11,0.644,12,0.039,16,0.444,19,0.029,20,0.029,50,0.73,53,1.003,85,1.003,91,3.236,102,1.869,103,1.505,105,2.4,106,1.962,117,1.505,142,2.796,181,2.745,188,1.673,191,2.105,194,3.645,196,1.673,234,2.437,249,3.645,251,2.745,252,3.645,253,3.645,254,4.427,255,3.396,256,3.396,257,2.796,258,2.796]],["title/classes/PatchUserDto.html",[8,0.019,259,1.858]],["body/classes/PatchUserDto.html",[3,0.521,4,0.449,5,0.449,8,0.026,11,0.641,12,0.038,16,0.521,19,0.032,20,0.032,103,1.767,191,2.471,214,2.194,216,2.818,253,4.034,258,3.282,259,3.038,260,3.282,261,4.9,262,3.282,263,3.282,264,3.282]],["title/controllers/PostsController.html",[0,1.083,265,1.858]],["body/controllers/PostsController.html",[0,0.782,2,0.782,3,0.283,4,0.244,5,0.244,7,1.056,8,0.014,11,0.6,12,0.039,13,0.519,16,0.283,17,1.192,18,0.96,19,0.021,20,0.021,46,1.782,50,0.466,51,1.592,53,1.141,56,1.904,57,1.396,58,1.067,63,1.53,76,2.88,83,2.127,84,2.127,85,1.141,86,1.545,102,2.646,114,2.283,117,1.712,136,2.111,191,2.003,196,1.067,251,2.98,257,2.659,265,2.003,266,1.782,267,2.165,268,3.23,269,3.23,270,3.23,271,2.165,272,3.23,273,3.23,274,3.23,275,3.23,276,3.23,277,2.165,278,2.165,279,3.23,280,2.165,281,3.23,282,2.165,283,2.659,284,2.165,285,3.23,286,2.165,287,2.165,288,1.782,289,1.782,290,2.659,291,1.904,292,1.782,293,3.181,294,3.181,295,1.782,296,1.782,297,1.782,298,2.165,299,2.165,300,2.165,301,2.165,302,2.659,303,2.165,304,2.165,305,1.782,306,2.165,307,2.165]],["title/modules/PostsModule.html",[21,1.083,34,1.65]],["body/modules/PostsModule.html",[2,1.533,3,0.416,4,0.358,5,0.358,8,0.021,11,0.666,12,0.038,13,0.763,16,0.416,19,0.027,20,0.027,21,1.724,23,1.411,24,1.411,25,1.752,26,1.752,27,1.411,28,2.627,29,1.752,34,3.112,35,2.416,36,2.335,37,1.752,38,1.568,40,2.63,74,2.621,265,2.958,291,2.686,292,2.621,308,2.621,309,2.621,310,3.183,311,3.183,312,3.183]],["title/injectables/PostsService.html",[47,1.083,291,1.477]],["body/injectables/PostsService.html",[3,0.402,4,0.346,5,0.346,8,0.02,11,0.542,12,0.039,13,0.737,16,0.402,17,1.692,18,1.362,19,0.027,20,0.027,45,2.906,47,1.497,48,1.692,50,0.661,51,2.041,53,1.224,56,1.514,57,1.694,58,1.514,76,2.581,79,2.172,80,2.53,81,2.158,83,2.281,84,2.281,85,1.224,86,1.657,95,2.53,98,2.172,107,3.411,116,3.411,283,2.53,291,2.041,313,2.53,314,3.411,315,3.073,316,4.144,317,3.073,318,3.073]],["title/controllers/UsersController.html",[0,1.083,319,1.858]],["body/controllers/UsersController.html",[0,0.62,2,0.62,3,0.224,4,0.193,5,0.193,7,1.553,8,0.011,11,0.573,12,0.038,13,0.411,16,0.224,17,0.944,18,0.76,19,0.017,20,0.017,50,0.369,51,1.331,53,0.987,56,1.647,57,0.62,58,1.647,63,1.213,76,2.691,81,1.337,83,1.84,84,2.271,85,1.354,86,1.337,114,1.213,117,1.482,119,2.351,127,3.122,128,3.122,136,1.869,137,2.945,196,0.845,214,2.524,234,2.933,243,2.088,245,3.102,259,2.945,264,2.225,288,1.413,289,2.225,290,2.752,293,2.225,294,2.225,295,1.413,296,1.413,297,1.413,302,1.413,305,2.225,319,1.675,320,1.413,321,2.702,322,3.343,323,2.702,324,1.716,325,1.716,326,1.716,327,3.912,328,1.716,329,1.716,330,2.702,331,1.716,332,1.716,333,2.702,334,1.716,335,2.702,336,1.716,337,1.716,338,1.716,339,1.716,340,1.716,341,1.716,342,1.716,343,1.716,344,3.343,345,1.716,346,1.716,347,1.413,348,1.413,349,1.413,350,3.343,351,1.716,352,1.716,353,1.716,354,1.716,355,1.716,356,1.716,357,2.225,358,1.716,359,1.716,360,1.716,361,1.716,362,1.716,363,1.716,364,1.716,365,1.716,366,1.716,367,1.716,368,1.716]],["title/modules/UsersModule.html",[21,1.083,35,1.329]],["body/modules/UsersModule.html",[2,1.489,3,0.399,4,0.343,5,0.343,8,0.02,11,0.683,12,0.039,13,0.731,16,0.399,19,0.027,20,0.027,21,1.687,23,1.35,24,1.35,25,1.677,26,1.677,27,1.35,28,2.569,29,2.569,33,2.03,35,2.439,36,2.268,37,1.677,38,1.501,40,1.889,61,1.677,72,2.554,81,2.331,319,2.893,349,2.508,369,2.508,370,2.508,371,2.508,372,3.047,373,3.047,374,3.047,375,3.047]],["title/injectables/UsersService.html",[47,1.083,81,1.199]],["body/injectables/UsersService.html",[3,0.273,4,0.235,5,0.235,7,0.683,8,0.024,9,3.58,10,3.58,11,0.495,12,0.039,13,0.501,16,0.273,18,0.926,19,0.02,20,0.02,47,1.136,48,1.15,50,0.449,51,1.549,53,1.117,56,1.549,57,1.631,58,1.549,65,2.181,72,1.295,76,2.611,77,1.72,79,2.223,81,1.257,83,2.082,84,2.082,85,1.117,86,1.512,91,2.344,93,2.975,94,1.72,96,1.72,97,1.72,98,1.476,137,2.344,218,2.589,234,2.709,243,2.611,245,1.295,250,1.72,314,3.113,327,3.113,347,1.72,348,1.72,376,1.72,377,3.145,378,2.089,379,2.089,380,4.743,381,2.089,382,2.089,383,3.145,384,2.089,385,2.089,386,2.089,387,2.089,388,3.145,389,2.089,390,3.145,391,2.089,392,2.089,393,2.089]],["title/coverage.html",[394,2.88]],["body/coverage.html",[0,1.731,1,1.706,5,0.31,6,2.265,8,0.034,12,0.038,14,1.356,19,0.025,20,0.025,27,1.22,47,1.731,49,2.265,55,2.265,61,1.515,62,2.265,65,1.22,75,2.265,81,1.1,85,0.813,102,1.515,104,2.715,105,2.715,124,1.706,136,1.356,210,2.265,214,1.515,215,2.265,216,2.715,243,1.515,244,2.265,245,1.706,246,2.265,251,1.706,252,2.265,259,1.706,260,2.265,265,1.706,266,2.265,291,1.356,313,2.265,319,1.706,320,2.265,357,2.265,376,2.265,394,1.945,395,2.265,396,2.752,397,2.752,398,4.425,399,2.752,400,2.752,401,5.733,402,4.425,403,4.425,404,2.265,405,3.841,406,2.752,407,3.841,408,2.752,409,2.752,410,2.752,411,2.752]],["title/dependencies.html",[24,1.596,412,2.068]],["body/dependencies.html",[8,0.031,12,0.039,13,0.91,19,0.031,20,0.031,24,1.682,188,1.87,193,2.682,196,1.87,262,3.124,263,3.124,413,3.795,414,3.795,415,4.753,416,3.795,417,3.795,418,3.795,419,3.795,420,3.795,421,3.795,422,3.795,423,3.795,424,3.795,425,3.795,426,3.795,427,3.795,428,3.795]],["title/miscellaneous/enumerations.html",[429,1.557,430,2.965]],["body/miscellaneous/enumerations.html",[12,0.038,19,0.03,20,0.03,50,0.787,110,3.824,136,2.288,137,2.879,138,3.824,164,3.824,165,3.824,166,3.824,167,3.824,199,3.824,203,3.824,209,4.115,429,2.268,430,3.012,431,3.658,432,3.658,433,3.658,434,3.658]],["title/miscellaneous/functions.html",[429,1.557,435,2.965]],["body/miscellaneous/functions.html",[12,0.034,19,0.034,20,0.034,27,2.468,50,0.96,404,3.673,429,2.766,435,3.673,436,4.462]],["title/index.html",[50,0.54,437,2.512,438,2.512]],["body/index.html",[4,0.251,7,0.73,12,0.037,19,0.021,20,0.021,38,2.143,60,3.581,119,2.44,394,1.579,395,1.838,439,2.233,440,2.233,441,3.935,442,2.233,443,2.233,444,2.233,445,2.233,446,2.233,447,2.233,448,3.935,449,2.233,450,2.233,451,2.233,452,4.35,453,2.233,454,5.031,455,2.233,456,5.031,457,2.233,458,2.233,459,2.233,460,3.305,461,2.233,462,2.233,463,2.233,464,3.935,465,2.233,466,3.305,467,2.233,468,2.233,469,2.233,470,4.35,471,2.233,472,2.233,473,2.233,474,2.233,475,2.233,476,3.305,477,2.233,478,3.935,479,2.233,480,3.581,481,3.305,482,2.233,483,2.233,484,2.233,485,2.233,486,2.233,487,2.233,488,3.935,489,2.233,490,2.233,491,2.233,492,3.305,493,2.233,494,2.233,495,2.233,496,3.935,497,2.233,498,2.233,499,2.233,500,2.233,501,2.233,502,2.233,503,2.233,504,3.305,505,2.233,506,2.233,507,2.233,508,2.233,509,2.233,510,2.233,511,3.305,512,2.233,513,2.233,514,2.233,515,3.305,516,3.305,517,2.233,518,2.233,519,2.233,520,2.233,521,2.233,522,2.233,523,2.233,524,2.233,525,2.233,526,2.233,527,2.233,528,1.838,529,2.233,530,2.233,531,2.233,532,2.233,533,2.233,534,2.233,535,1.838]],["title/modules.html",[23,1.806]],["body/modules.html",[12,0.032,19,0.032,20,0.032,22,2.557,23,1.828,33,2.032,34,2.271,35,1.828,480,4.611,536,5.601,537,5.601,538,5.601]],["title/overview.html",[539,3.355]],["body/overview.html",[2,1.06,12,0.037,14,2.255,19,0.026,20,0.026,21,1.06,22,3.53,23,1.3,24,1.3,25,1.615,26,1.615,27,1.3,28,1.615,29,1.615,30,2.415,31,2.415,32,2.415,33,2.623,34,3,35,2.415,36,2.21,37,1.615,38,1.445,48,1.615,65,2.415,68,2.415,69,2.415,70,2.415,81,2.179,103,1.3,291,2.255,308,2.415,309,2.415,369,2.415,370,2.415,371,2.415,539,2.415,540,4.577,541,2.933]],["title/properties.html",[106,1.596,412,2.068]],["body/properties.html",[7,1.431,12,0.038,19,0.034,20,0.034,106,1.941,528,3.605,535,3.605,542,4.379,543,4.379,544,4.379]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":401,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":543,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":402,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":407,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":405,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":403,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":333,"title":{},"body":{"controllers/UsersController.html":{}}}],["1.1.25",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":399,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":355,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["10.4.1",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["10})@apiquery({name",{"_index":332,"title":{},"body":{"controllers/UsersController.html":{}}}],["123",{"_index":250,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UsersService.html":{}}}],["123})@isoptional()@isint()@type(undefined",{"_index":247,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.5",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":400,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["200})@patch",{"_index":286,"title":{},"body":{"controllers/PostsController.html":{}}}],["201",{"_index":274,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["4",{"_index":540,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":409,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":541,"title":{},"body":{"overview.html":{}}}],["7.4.0",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["_0",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alice",{"_index":391,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@me.com",{"_index":392,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":521,"title":{},"body":{"index.html":{}}}],["apioperation",{"_index":293,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":272,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isarray()@isnotempty()@minlength(3",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({description",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":350,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":294,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":295,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":352,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":492,"title":{},"body":{"index.html":{}}}],["applications",{"_index":447,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":22,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":14,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":73,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":61,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":33,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":528,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":65,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["backers",{"_index":522,"title":{},"body":{"index.html":{}}}],["board",{"_index":514,"title":{},"body":{"index.html":{}}}],["body",{"_index":288,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":538,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":536,"title":{},"body":{"modules.html":{}}}],["building",{"_index":442,"title":{},"body":{"index.html":{}}}],["channel",{"_index":483,"title":{},"body":{"index.html":{}}}],["character",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":470,"title":{},"body":{"index.html":{}}}],["class",{"_index":8,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":103,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":308,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":310,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":309,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":369,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":370,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":371,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":473,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["console.log(createpostdto",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(createuserdto",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(isauth",{"_index":387,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(patchpostdto",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":378,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":351,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":490,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":394,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{}}}],["created",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{}}}],["created.'})@post",{"_index":277,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":268,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":271,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":102,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":124,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["createuser",{"_index":321,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(@body",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":324,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":214,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["date",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":485,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe",{"_index":345,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":360,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":358,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":339,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":24,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":457,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":498,"title":{},"body":{"index.html":{}}}],["discord",{"_index":482,"title":{},"body":{"index.html":{}}}],["dive",{"_index":484,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":395,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":393,"title":{},"body":{"injectables/UsersService.html":{}}}],["doing",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/UsersService.html":{}}}],["draft",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":347,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":467,"title":{},"body":{"index.html":{}}}],["each",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":443,"title":{},"body":{"index.html":{}}}],["eight",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["endpoint",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{}}}],["enterprise",{"_index":503,"title":{},"body":{"index.html":{}}}],["enum",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":430,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["example'})@isnotempty()@isstring()@minlength(4",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example'})@isoptional()@isstring",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["experience",{"_index":487,"title":{},"body":{"index.html":{}}}],["export",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":253,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["featuredimageurl",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["few",{"_index":471,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":314,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":381,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":316,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":377,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":383,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":217,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["fistname",{"_index":388,"title":{},"body":{"injectables/UsersService.html":{}}}],["follow",{"_index":507,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":441,"title":{},"body":{"index.html":{}}}],["full",{"_index":502,"title":{},"body":{"index.html":{}}}],["function",{"_index":55,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["functions",{"_index":435,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":353,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":328,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":281,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":52,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":269,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":280,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":437,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":322,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparam",{"_index":326,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparam",{"_index":335,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":243,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":493,"title":{},"body":{"index.html":{}}}],["grow",{"_index":518,"title":{},"body":{"index.html":{}}}],["hands",{"_index":486,"title":{},"body":{"index.html":{}}}],["handy",{"_index":474,"title":{},"body":{"index.html":{}}}],["headers",{"_index":342,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":59,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":500,"title":{},"body":{"index.html":{}}}],["here",{"_index":526,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":532,"title":{},"body":{"index.html":{}}}],["id",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/UsersService.html":{}}}],["id'})@isint()@isnotempty",{"_index":255,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["identifier",{"_index":396,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":50,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":47,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["installcompile",{"_index":455,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["interact",{"_index":494,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ip",{"_index":343,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isdate",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(statustype",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":249,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isemail",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring",{"_index":211,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["iso8601",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isobject",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["items",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":511,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":513,"title":{},"body":{"index.html":{}}}],["john",{"_index":389,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@me.com",{"_index":390,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":524,"title":{},"body":{"index.html":{}}}],["json",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":529,"title":{},"body":{"index.html":{}}}],["key",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["lastname",{"_index":218,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["learn",{"_index":477,"title":{},"body":{"index.html":{}}}],["legend",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":535,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":516,"title":{},"body":{"index.html":{}}}],["limit",{"_index":327,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":509,"title":{},"body":{"index.html":{}}}],["login",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":510,"title":{},"body":{"index.html":{}}}],["loop",{"_index":505,"title":{},"body":{"index.html":{}}}],["matches",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/[a",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matches(/^(?=.*[a",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maxlength",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["metadata",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["metaoptions.dto",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["metaoptions.dto.ts",{"_index":210,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metaoptions.dto.ts:6",{"_index":212,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["metaoptions.dto.ts:9",{"_index":213,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["method",{"_index":380,"title":{},"body":{"injectables/UsersService.html":{}}}],["methods",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":429,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":515,"title":{},"body":{"index.html":{}}}],["mode",{"_index":460,"title":{},"body":{"index.html":{}}}],["module",{"_index":21,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":23,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":478,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":530,"title":{},"body":{"index.html":{}}}],["name",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":499,"title":{},"body":{"index.html":{}}}],["nest",{"_index":448,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":534,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":60,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["nestjs/common",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":262,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":357,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":440,"title":{},"body":{"index.html":{}}}],["npm",{"_index":454,"title":{},"body":{"index.html":{}}}],["number",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":512,"title":{},"body":{"index.html":{}}}],["official",{"_index":488,"title":{},"body":{"index.html":{}}}],["one",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":517,"title":{},"body":{"index.html":{}}}],["operation",{"_index":354,"title":{},"body":{"controllers/UsersController.html":{}}}],["operation'})@apiquery({name",{"_index":331,"title":{},"body":{"controllers/UsersController.html":{}}}],["optional",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":539,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":412,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":289,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":348,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":246,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":248,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":344,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":501,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":258,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":254,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":261,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":290,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":251,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":323,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":336,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":259,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["please",{"_index":481,"title":{},"body":{"index.html":{}}}],["possible",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":273,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.dto",{"_index":257,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":105,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:11",{"_index":256,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:113",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:29",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:37",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:47",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:55",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:63",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:71",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:76",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:84",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:91",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":267,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":312,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":265,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":34,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":291,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["posttype",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":462,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":439,"title":{},"body":{"index.html":{}}}],["project",{"_index":452,"title":{},"body":{"index.html":{}}}],["properties",{"_index":106,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":292,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":349,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(statustype)@isnotempty",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["put",{"_index":338,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":340,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":356,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":359,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":479,"title":{},"body":{"index.html":{}}}],["read",{"_index":525,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":495,"title":{},"body":{"index.html":{}}}],["record",{"_index":275,"title":{},"body":{"controllers/PostsController.html":{}}}],["reflect",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":451,"title":{},"body":{"index.html":{}}}],["req",{"_index":341,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":472,"title":{},"body":{"index.html":{}}}],["results",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":58,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":56,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["run",{"_index":456,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":444,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sent",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["serialize",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":445,"title":{},"body":{"index.html":{}}}],["setup",{"_index":453,"title":{},"body":{"index.html":{}}}],["side",{"_index":446,"title":{},"body":{"index.html":{}}}],["slug",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["something",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/UsersService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sponsors",{"_index":520,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":436,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":432,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":431,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":49,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:11",{"_index":54,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller",{"_index":374,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":375,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":385,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":75,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:17",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":404,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":104,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":252,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":434,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":433,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":266,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:13",{"_index":282,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:25",{"_index":278,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:37",{"_index":287,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":311,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":313,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":315,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:8",{"_index":317,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":215,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":244,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":260,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":376,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:21",{"_index":382,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:45",{"_index":384,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:9",{"_index":379,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":320,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:52",{"_index":334,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":325,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:68",{"_index":337,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":74,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":372,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":458,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":461,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":463,"title":{},"body":{"index.html":{}}}],["started",{"_index":438,"title":{"index.html":{}},"body":{}}],["starter",{"_index":450,"title":{},"body":{"index.html":{}}}],["statements",{"_index":397,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["statustype",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["stay",{"_index":504,"title":{},"body":{"index.html":{}}}],["story",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":57,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["successful",{"_index":330,"title":{},"body":{"controllers/UsersController.html":{}}}],["successfully",{"_index":276,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":480,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":537,"title":{},"body":{"modules.html":{}}}],["table",{"_index":411,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":410,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["test",{"_index":466,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":469,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":468,"title":{},"body":{"index.html":{}}}],["tests",{"_index":464,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":519,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":386,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservice.findall(userid",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice.findall(getusersparam",{"_index":361,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('123",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":318,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["thrown'})@isoptional()@isjson",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":496,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["title",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["touch",{"_index":527,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@isstring({each",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":533,"title":{},"body":{"index.html":{}}}],["type",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["types",{"_index":263,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":449,"title":{},"body":{"index.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":465,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":544,"title":{},"body":{"properties.html":{}}}],["update",{"_index":285,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost",{"_index":270,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":284,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":506,"title":{},"body":{"index.html":{}}}],["url",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["url''})@isstring()@isnotempty()@matches(/[a",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["user",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{}}}],["user.dto",{"_index":264,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":216,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":283,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":245,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users'})@apiresponse({status",{"_index":329,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":373,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":319,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":35,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":81,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":497,"title":{},"body":{"index.html":{}}}],["valid",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":346,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":542,"title":{},"body":{"properties.html":{}}}],["video",{"_index":489,"title":{},"body":{"index.html":{}}}],["visit",{"_index":476,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":491,"title":{},"body":{"index.html":{}}}],["void",{"_index":279,"title":{},"body":{"controllers/PostsController.html":{}}}],["watch",{"_index":459,"title":{},"body":{"index.html":{}}}],["website",{"_index":531,"title":{},"body":{"index.html":{}}}],["working",{"_index":475,"title":{},"body":{"index.html":{}}}],["x",{"_index":508,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":523,"title":{},"body":{"index.html":{}}}],["z",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Class to doing something\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**\n * Class to doing something\n */\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n/*\n * User created modules\n */\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to doing something\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:11\n                        \n                    \n\n\n            \n                \n                        Function\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * Class to doing something\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Function\n   */\n  getHello(): string {\n    return 'Hello NestJS!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [forwardRef(() => UsersModule)],\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  public login(email: string, password: string, id: string) {\n    const user = this.usersService.findOneById('123');\n\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Description', example: 'Example'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values  'post', 'page', 'story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Must be a valid timestamp in ISO8601', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example 'my-url''})@IsString()@IsNotEmpty()@Matches(/[a-z\\-\\_0-9]+/, {message: 'Invalid Slug'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StatusType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: StatusType, description: 'Possible values 'draft', 'scheduled', 'review', 'published''})@IsEnum(StatusType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsArray()@IsNotEmpty()@MinLength(3, {each: true})@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description', example: 'Example'})@IsNotEmpty()@IsString()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsObject,\n  IsOptional,\n  IsString,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport PostType from '../enums/postType.enum';\nimport StatusType from '../enums/postStatus.enum';\nimport { CreatePostMetaOptionsDto } from './create-post-metaoptions.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'Description',\n    example: 'Example',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(4)\n  title: string;\n\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values  'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  @ApiProperty({\n    description: \"For example 'my-url'\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/[a-z\\-\\_0-9]+/, {\n    message: 'Invalid Slug',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: StatusType,\n    description: \"Possible values 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(StatusType)\n  @IsNotEmpty()\n  status: StatusType;\n\n  @ApiPropertyOptional({\n    description: 'Description',\n    example: 'Example',\n  })\n  @IsOptional()\n  @IsString()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'Must be a valid timestamp in ISO8601',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional()\n  @IsArray()\n  @IsNotEmpty()\n  @MinLength(3, { each: true })\n  @IsString({ each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n\n      properties: {\n        key: {\n          type: 'string',\n        },\n        value: {\n          type: 'any',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-metaoptions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-metaoptions.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-metaoptions.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsNotEmpty()\n  @IsString()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user by id', example: 123})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsInt } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user by id',\n    example: 123,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreatePostDto } from './create-post.dto';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'ID',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create Post'})@ApiResponse({status: 201, description: 'The record has been successfully created.'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Post'})@ApiResponse({status: 200})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/:userId?')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  @ApiOperation({\n    summary: 'Create Post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'The record has been successfully created.',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    // !!\n    console.log(createPostDto);\n  }\n\n  @ApiOperation({\n    summary: 'Update Post',\n  })\n  @ApiResponse({\n    status: 200,\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    console.log(patchPostDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(private readonly usersService: UsersService) {}\n\n  public findAll(userId: string) {\n    const user = this.usersService.findOneById(userId);\n\n    return [\n      {\n        user: user,\n        title: 'Title',\n        content: 'Content',\n      },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParam: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Get all users', description: 'Get all users'})@ApiResponse({status: 200, description: 'Successful operation'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'Limit the number of users', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'Page number of users', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParam\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Patch,\n  Put,\n  Delete,\n  Param,\n  Query,\n  Body,\n  Req,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Get all users',\n    description: 'Get all users',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Successful operation',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'Limit the number of users',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'Page number of users',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUsersParam: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUsersParam, limit, page);\n  }\n\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    console.log(createUserDto instanceof CreateUserDto);\n\n    return 'You sent a post request to users endpoint';\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthController } from 'src/auth/auth.controller';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [forwardRef(() => AuthModule)],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to doing something\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            Method to doing something\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Method to doing something\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Method to doing something\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; lastName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\n\n/**\n * Class to doing something\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Method to doing something\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n\n  /**\n   * Method to doing something\n   */\n  public findAll(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    const isAuth = this.authService.isAuth();\n\n    console.log(isAuth);\n\n    return [\n      {\n        fistName: 'John',\n        email: 'john@me.com',\n      },\n      {\n        fistName: 'Alice',\n        email: 'alice@me.com',\n      },\n    ];\n  }\n\n  /**\n   * Method to doing something\n   */\n  public findOneById(id: string) {\n    return {\n      id: 123,\n      lastName: 'Doe',\n      email: 'john@me.com',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-metaoptions.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.4.1\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostType   (src/.../postType.enum.ts)\n                        \n                        \n                            StatusType   (src/.../postStatus.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        StatusType\n                    \n                \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
